// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	crypto "github.com/onflow/flow-go/crypto"
	flow "github.com/onflow/flow-go/model/flow"

	mock "github.com/stretchr/testify/mock"
)

// MultiMessageSignatureAggregator is an autogenerated mock type for the MultiMessageSignatureAggregator type
type MultiMessageSignatureAggregator struct {
	mock.Mock
}

// Aggregate provides a mock function with given fields:
func (_m *MultiMessageSignatureAggregator) Aggregate() ([]flow.Identifier, []byte, error) {
	ret := _m.Called()

	var r0 []flow.Identifier
	if rf, ok := ret.Get(0).(func() []flow.Identifier); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]flow.Identifier)
		}
	}

	var r1 []byte
	if rf, ok := ret.Get(1).(func() []byte); ok {
		r1 = rf()
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]byte)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func() error); ok {
		r2 = rf()
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// TotalWeight provides a mock function with given fields:
func (_m *MultiMessageSignatureAggregator) TotalWeight() uint64 {
	ret := _m.Called()

	var r0 uint64
	if rf, ok := ret.Get(0).(func() uint64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint64)
	}

	return r0
}

// TrustedAdd provides a mock function with given fields: signerID, sig, msg
func (_m *MultiMessageSignatureAggregator) TrustedAdd(signerID flow.Identifier, sig crypto.Signature, msg []byte) (uint64, error) {
	ret := _m.Called(signerID, sig, msg)

	var r0 uint64
	if rf, ok := ret.Get(0).(func(flow.Identifier, crypto.Signature, []byte) uint64); ok {
		r0 = rf(signerID, sig, msg)
	} else {
		r0 = ret.Get(0).(uint64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(flow.Identifier, crypto.Signature, []byte) error); ok {
		r1 = rf(signerID, sig, msg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Verify provides a mock function with given fields: signerID, sig, msg
func (_m *MultiMessageSignatureAggregator) Verify(signerID flow.Identifier, sig crypto.Signature, msg []byte) error {
	ret := _m.Called(signerID, sig, msg)

	var r0 error
	if rf, ok := ret.Get(0).(func(flow.Identifier, crypto.Signature, []byte) error); ok {
		r0 = rf(signerID, sig, msg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
