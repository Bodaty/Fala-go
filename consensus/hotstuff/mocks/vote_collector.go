// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	hotstuff "github.com/onflow/flow-go/consensus/hotstuff"
	flow "github.com/onflow/flow-go/model/flow"

	mock "github.com/stretchr/testify/mock"

	model "github.com/onflow/flow-go/consensus/hotstuff/model"
)

// VoteCollector is an autogenerated mock type for the VoteCollector type
type VoteCollector struct {
	mock.Mock
}

// AddVote provides a mock function with given fields: vote
func (_m *VoteCollector) AddVote(vote *model.Vote) (bool, error) {
	ret := _m.Called(vote)

	var r0 bool
	if rf, ok := ret.Get(0).(func(*model.Vote) bool); ok {
		r0 = rf(vote)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*model.Vote) error); ok {
		r1 = rf(vote)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BlockID provides a mock function with given fields:
func (_m *VoteCollector) BlockID() flow.Identifier {
	ret := _m.Called()

	var r0 flow.Identifier
	if rf, ok := ret.Get(0).(func() flow.Identifier); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(flow.Identifier)
		}
	}

	return r0
}

// Status provides a mock function with given fields:
func (_m *VoteCollector) Status() hotstuff.VoteCollectorStatus {
	ret := _m.Called()

	var r0 hotstuff.VoteCollectorStatus
	if rf, ok := ret.Get(0).(func() hotstuff.VoteCollectorStatus); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(hotstuff.VoteCollectorStatus)
	}

	return r0
}
